name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  # üß™ Job 1: TEST
  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:latest
        # don't rely on host port mapping; the job runner can reach the service by hostname "mongodb:27017"
        options: >-
          --health-cmd "mongo --eval 'db.adminCommand(\"ping\")' --quiet || exit 1"
          --health-interval=5s --health-timeout=5s --health-retries=5
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics status || exit 1"
          --health-interval=5s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # Install dependencies for services
      - name: Install dependencies (auth)
        working-directory: ./auth
        run: npm install

      - name: Install dependencies (product)
        working-directory: ./product
        run: npm install

      - name: Install dependencies (order)
        working-directory: ./order
        run: npm install

      # Start Auth service (connects to mongodb hostname)
      - name: Start Auth service
        working-directory: ./auth
        env:
          PORT: 3000
          # use service hostnames (mongodb) instead of localhost
          MONGODB_AUTH_URI: mongodb://root:password@mongodb:27017/authDB?authSource=admin
          JWT_SECRET: secretkey123
        run: |
          echo "üöÄ Starting Auth Service..."
          nohup npm start > auth.log 2>&1 & echo $! > /tmp/auth_pid
          echo "‚è≥ Waiting for Auth service to listen on port 3000..."
          SUCCESS=false
          for i in {1..30}; do
            if nc -z 127.0.0.1 3000; then
              echo "‚úÖ Auth service is ready"
              SUCCESS=true
              break
            fi
            echo "‚è≥ Waiting... ($i/30)"
            sleep 2
          done
          if [ "$SUCCESS" = false ]; then
            echo "‚ùå Auth service failed to start in time!"
            cat auth.log || true
            exit 1
          fi

      # Register a test user (safe to ignore failure if already exists)
      - name: Register test user in Auth service
        run: |
          echo "üß© Registering test user..."
          curl -s -X POST http://localhost:3000/register \
            -H "Content-Type: application/json" \
            -d '{"username": "TruongVyHao", "password": "12345"}' || true

      # Run Product tests (connect to mongodb and rabbitmq by hostnames)
      - name: Run Product tests
        working-directory: ./product
        env:
          PORT: 3001
          MONGODB_AUTH_URI: mongodb://root:password@mongodb:27017/authDB?authSource=admin
          MONGODB_PRODUCT_URI: mongodb://root:password@mongodb:27017/productDB?authSource=admin
          RABBITMQ_URL: amqp://rabbitmq:5672
          JWT_SECRET: secretkey123
          LOGIN_TEST_USER: NguyenBaoDuy
          LOGIN_TEST_PASSWORD: '12345'
        run: npm test

      # cleanup auth process
      - name: Cleanup auth background process
        if: always()
        run: |
          if [ -f /tmp/auth_pid ]; then
            kill $(cat /tmp/auth_pid) || true
            rm -f /tmp/auth_pid
          fi

  # üê≥ Job 2: BUILD & PUSH DOCKER
  build-and-push:
    name: üê≥ Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        service: [auth, product, order, api-gateway]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/eproject-${{ matrix.service }}:latest
            ${{ secrets.DOCKER_USERNAME }}/eproject-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/eproject-${{ matrix.service }}:latest
          cache-to: type=inline

  # üì¢ Job 3: NOTIFY
  notify:
    name: üì¢ Deployment Notification
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Send summary message
        run: |
          echo "‚úÖ CI/CD pipeline completed successfully!"
          echo "üß™ Tests passed on branch: ${{ github.ref_name }}"
          echo "üê≥ Docker images pushed to Docker Hub: ${{ secrets.DOCKER_USERNAME }}/eproject-*"
          echo "üîñ Commit: ${{ github.sha }}"
