name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  # 🧪 Job 1: TEST
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27018:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --username root --password password --authenticationDatabase admin --eval 'db.adminCommand(\"ping\")'" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: 📦 Install dependencies (auth)
        working-directory: ./auth
        run: npm ci

      - name: 📦 Install dependencies (product)
        working-directory: ./product
        run: npm ci

      - name: 📦 Install dependencies (order)
        working-directory: ./order
        run: npm ci

      - name: 🚀 Start Auth service
        working-directory: ./auth
        env:
          PORT: 3000
          MONGODB_AUTH_URI: mongodb://root:password@mongodb:27017/authDB?authSource=admin
          JWT_SECRET: secretkey123
        run: |
          echo "Starting Auth service..."
          nohup npm start > auth.log 2>&1 &
          echo $! > /tmp/auth_pid
          echo "Waiting for Auth service to start..."
          for i in {1..20}; do
            if nc -z localhost 3000; then
              echo "✅ Auth service ready"
              break
            fi
            echo "⏳ Waiting... ($i/20)"
            sleep 3
          done
          if ! nc -z localhost 3000; then
            echo "❌ Auth service failed to start!"
            cat auth.log
            exit 1
          fi

      - name: 🧩 Register test user
        run: |
          curl -s -X POST http://localhost:3000/register \
            -H "Content-Type: application/json" \
            -d '{"username": "TruongVyHao", "password": "12345"}' || true

      - name: 🧪 Run Product tests
        working-directory: ./product
        env:
          PORT: 3001
          MONGODB_AUTH_URI: mongodb://root:password@mongodb:27017/authDB?authSource=admin
          MONGODB_PRODUCT_URI: mongodb://root:password@mongodb:27017/productDB?authSource=admin
          RABBITMQ_URL: amqp://rabbitmq:5672
          JWT_SECRET: secretkey123
          LOGIN_TEST_USER: NguyenBaoDuy
          LOGIN_TEST_PASSWORD: '12345'
        run: npm test

      - name: 🧹 Cleanup Auth service
        if: always()
        run: |
          if [ -f /tmp/auth_pid ]; then
            kill $(cat /tmp/auth_pid) || true
            rm -f /tmp/auth_pid
          fi

  # 🐳 Job 2: BUILD & PUSH DOCKER
  build-and-push:
    name: 🐳 Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        service: [auth, product, order, api-gateway]

    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 🧱 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/eproject-${{ matrix.service }}:latest
            ${{ secrets.DOCKER_USERNAME }}/eproject-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/eproject-${{ matrix.service }}:latest
          cache-to: type=inline

  # 📢 Job 3: NOTIFY
  notify:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: ✅ Send pipeline summary
        run: |
          echo "✅ CI/CD pipeline completed successfully!"
          echo "🧪 Tests passed on branch: ${{ github.ref_name }}"
          echo "🐳 Docker images pushed to Docker Hub: ${{ secrets.DOCKER_USERNAME }}/eproject-*"
          echo "🔖 Commit: ${{ github.sha }}"
